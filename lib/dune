(include_subdirs unqualified)

(library
 (name xmas)
 (libraries ppx_show.runtime menhirLib)
 (preprocess
  (pps ppx_show))
 (flags
  (:standard -warn-error -A)))

;; For the lexer

(ocamllex lexer)

;; For the code parser

(menhir
 (modules parser)
 (flags :standard))

;; For the incremental API parser

(rule
 (action
  (with-stdout-to
   errorParser.mly
   (run menhir %{dep:parser.mly} --only-preprocess-u))))

(menhir
 (modules errorParser)
 (flags :standard --table --external-tokens Parser))

;; For the error messages

(rule
 (target parserMessages.ml)
 (deps parser.messages parser.mly)
 (action
  (with-stdout-to
   %{target}
   (run menhir --compile-errors %{deps}))))

;; Generate a new error message file

(rule
 (target new.messages)
 (deps parser.mly)
 (action
  (with-stdout-to
   %{target}
   (run menhir --list-errors %{deps}))))

;; Update the autogenerated comments in the messages file

(rule
 (target updated.messages)
 (deps parser.messages parser.mly)
 (action
  (with-stdout-to
   %{target}
   (run menhir --update-errors %{deps}))))

;; Merge the new and updated messages

(rule
 (target parser.messages.updated)
 (deps
  (:parser parser.mly)
  (:new new.messages)
  (:updated updated.messages))
 (action
  (with-stdout-to
   %{target}
   (run menhir --merge-errors %{new} --merge-errors %{updated} %{parser}))))

;; Run `dune build @messages --auto-promote` to update the messages file.

(rule
 (alias messages)
 (deps parser.messages parser.messages.updated)
 (action
  (diff parser.messages parser.messages.updated)))

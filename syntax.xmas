circle \r -> {
    r@radius
}

for a in (1, 2, 3) {
    print(a)    
}

f \x y -> x + y

"this is a string"

a = (1..n)

(1, "asdasd" , (1, 2), 0.2)



f \x y -> {
    x+y@sum
}

point \x y -> {
    x@x
    y@y
    (x^2 + y^2).sqrt()@norm
}

translate::point \x y -> {
    (.x + x)@x
    (.y + y)@y 

}  


// list
[1, 2, 3]

// function definition
name \x y -> x + y

a = {
    b = {
        c = 1
    }
}

a.b.c = 10

a, b, str = input().int().float()

c \ x -> x + 1

fib \ 0 -> 1
fib \ 1 -> 1
fib \ n -> fib(n-1) + fib(n-2)


// function definition
identifier \ expression expression -> expression

f \x y -> {}.(x+y)

if a == 1 {

}

match a {
    \ 1 -> "one"
    \ 2 -> "two" 
    \ _ ->
        { 
            print("idk what happened")
            return "idk"
        }
}

match a == b {
    \ True -> { print("Equal") }
    \ False -> { print("Different") }
}

# member access 
expression.expression 

# member function 
(expression.expression) ( ... )

expression ( ... ) 

(a)(b)
a(b)(c)

update_name \ person new_name -> {
    person.name = new_name 
}.person


map \ list fn -> {
    
}
a = \n -> n + 1

map([1, 2, 3], a)


person \ name age -> {
    name = name 
    age = age
}

_dot \ arr index -> arr[index]

tree \ left right key value -> {

    left = left 
    right = right 
    k = key 
    v = value 

    get_value \ key -> {
        ret = -1
        if (tree.k == key) {
            ret = tree.v
        } else { 
            
        }
    }

} 

list = [1, 2, 3]

// quick-scope
print(list.{
    sum = 0
    for i in range(len) {
        sum += [i]
    }
}.sum)

// parsing input 
a_int, b_bool, c_string = input.parse(int, bool, string)

// 
read_line()


input = {
    line = ""
    line_pos = 0

    int \ -> {
        result = 0
        is_positive = 1
        if line.[line_pos] == '-' {
            is_positive = -1
            line_pos = line_pos + 1
        }

        while (['0', '1', '2', '3', '4', '5'].contains(line.[line_pos])) {
            result = result * 10
            result += char.ord(line.[line_pos]) - char.ord('0')
            line_pos = line_pos + 1
        }
    }.(result * is_positive)

    parse \ ..funs -> { 
        line = read_line()
        ret = ()
        for f in funs {
            ret = ret:f()
        }
    }.ret 
}



Future Features: 
- tuple deconstruction 
a, b = (1, 2)

- whatever this is 
#before (a+b) print(a)
